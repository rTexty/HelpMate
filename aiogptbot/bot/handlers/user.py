from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.markdown import hbold
from aiogram.utils.chat_action import ChatActionSender
from datetime import datetime, timedelta
from ..filters import SadEmotionFilter, BadWordFilter, PremiumFilter
from ..db.postgres import db
from ..db.redis_client import redis_client
from ..services.openai_service import ask_gpt
from ..services.memory_service import get_user_memory, update_user_memory
from ..services.subscription_service import get_user_status, get_daily_limit, get_subscription_info
from loguru import logger
import asyncio
from aiogptbot.bot.config import settings
import httpx
from aiogptbot.bot.services.payment_service import create_telegram_invoice, create_cryptocloud_invoice

router = Router()

bad_word_filter = BadWordFilter()

@router.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"START COMMAND")
    if not message.from_user:
        return
    user_id = message.from_user.id
    user = await db.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await db.execute(
            "INSERT INTO users (telegram_id, username, full_name, created_at) VALUES ($1, $2, $3, $4)",
            user_id, message.from_user.username, message.from_user.full_name, datetime.now()
        )
    await message.answer(
        f"{hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')}\n\n"
        "–Ø ‚Äî –≤–∞—à AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.\n"
        "–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å. –î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    )

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    user = await db.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return
    status = user['status']
    sub_until = user['subscription_until']
    daily_count = user['daily_message_count']
    sub_text = f"–¥–æ {sub_until.strftime('%d.%m.%Y')}" if sub_until else "–Ω–µ—Ç"
    await message.answer(
        f"{hbold('–ü—Ä–æ—Ñ–∏–ª—å')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_text}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_count}/5 (–¥–ª—è demo)"
    )

@router.message()
async def dialog_handler(message: Message, bot: Bot):
    if not message.from_user:
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
    if await bad_word_filter(message):
        await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤–µ–∂–ª–∏–≤–æ üòä")
        return
    user_id = message.from_user.id
    user = await db.fetchrow("SELECT * FROM users WHERE telegram_id=$1", user_id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return
    try:
        await db.execute(
            "INSERT INTO messages (user_id, role, content, created_at) VALUES ($1, $2, $3, $4)",
            user['id'], 'user', message.text, datetime.now()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    if user['status'] == 'demo' and user['daily_message_count'] >= 5:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram", callback_data="pay_telegram"),
                    InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay_crypto")
                ]
            ]
        ))
        return
    memory = await get_user_memory(user_id)
    prompt = await db.fetchrow("SELECT text FROM prompts WHERE is_active=TRUE ORDER BY id DESC LIMIT 1")
    system_prompt = prompt['text'] if prompt else "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."
    history = memory['history'] if memory else []
    summary = memory['summary'] if memory else None
    history.append({"role": "user", "content": message.text})
    text_len = len(message.text) if message.text else 0
    delay = 3 if text_len > 100 else 1.5
    async with ChatActionSender(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(delay)
        gpt_response = await ask_gpt(system_prompt, history, summary)
        await message.answer(gpt_response)
    try:
        await db.execute(
            "INSERT INTO messages (user_id, role, content, created_at) VALUES ($1, $2, $3, $4)",
            user['id'], 'assistant', gpt_response, datetime.now()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
    await update_user_memory(user_id, history, gpt_response)
    await db.execute(
        "UPDATE users SET daily_message_count = daily_message_count + 1, last_activity = $1 WHERE telegram_id = $2",
        datetime.now(), user_id
    )
    logger.info(f"User {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç GPT")

@router.callback_query(F.data == "pay_telegram")
async def pay_telegram_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    invoice_data, error = await create_telegram_invoice(user_id)
    if error or not invoice_data:
        await bot.send_message(user_id, error or "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()
        return
    await bot.send_invoice(
        invoice_data["user_id"],
        invoice_data["title"],
        invoice_data["description"],
        invoice_data["payload"],
        invoice_data["provider_token"],
        invoice_data["currency"],
        invoice_data["prices"],
        start_parameter=invoice_data["start_parameter"]
    )
    await callback.answer()

@router.callback_query(F.data == "pay_crypto")
async def pay_crypto_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    result, error = await create_cryptocloud_invoice(user_id)
    if error:
        await bot.send_message(user_id, error)
        await callback.answer()
        return
    if result and "url" in result:
        await bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞):\n{result['url']}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.")
    else:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()
