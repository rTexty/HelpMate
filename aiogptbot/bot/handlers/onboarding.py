from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender
from ..db.postgres import db
import asyncio
from loguru import logger

class OnboardingStates(StatesGroup):
    start_intro = State()
    second_intro = State()
    waiting_for_name = State()
    name_confirmation = State()
    waiting_for_age = State()
    waiting_for_gender = State()

router = Router()

@router.message(Command("start"), OnboardingStates.start_intro)
@router.message(Command("start"), OnboardingStates.second_intro)
@router.message(Command("start"), OnboardingStates.waiting_for_name)
@router.message(Command("start"), OnboardingStates.name_confirmation)
@router.message(Command("start"), OnboardingStates.waiting_for_age)
@router.message(Command("start"), OnboardingStates.waiting_for_gender)
async def restart_onboarding_during_state(message: Message, state: FSMContext, bot: Bot):
    """
    Handles the /start command during any of the onboarding steps,
    effectively resetting and restarting the process.
    """
    if not message.from_user:
        return
        
    logger.info(f"User {message.from_user.id} sent /start during onboarding. Restarting process.")
    await state.clear()
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
    await start_onboarding(message, state, bot)

async def start_onboarding(message: Message, state: FSMContext, bot: Bot):
    """Initiates the onboarding process."""
    if not message.from_user:
        return
    logger.info(f"--- Function start_onboarding called for user {message.from_user.id} ---")
    
    bot_name_row = await db.fetchrow("SELECT value FROM text_settings WHERE key='bot_name'")
    bot_name = bot_name_row['value'] if bot_name_row else "–ú–∞—à–∞"
    
    async with ChatActionSender(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(1)
        markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"–ü—Ä–∏–≤–µ—Ç, {bot_name}!", callback_data="intro_1_next")]])
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {bot_name} üòä –Ø –±—É–¥—É —Ç–≤–æ–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏ –¥—Ä—É–≥–æ–º.", reply_markup=markup)
    await state.set_state(OnboardingStates.start_intro)

@router.callback_query(OnboardingStates.start_intro, F.data == "intro_1_next")
async def handle_intro_1(call: CallbackQuery, state: FSMContext, bot: Bot):
    if not call.message:
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    # await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    async with ChatActionSender(bot=bot, chat_id=call.message.chat.id):
        await asyncio.sleep(1)
        markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–¥–æ—Ä–æ–≤–æ!", callback_data="intro_2_next")]])
        await bot.send_message(call.message.chat.id, "üí´ –Ø –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–º–æ—â—å, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ù–∞—à –¥–∏–∞–ª–æ–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω –∫ –ø—Ä–æ—Ü–µ—Å—Å—É —Ç–µ—Ä–∞–ø–∏–∏. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —É—Å–ª—ã—à–∞—Ç—å —Ç–µ–±—è, –ø–æ–Ω—è—Ç—å –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ–º.", reply_markup=markup)
    await state.set_state(OnboardingStates.second_intro)
    await call.answer()

@router.callback_query(OnboardingStates.second_intro, F.data == "intro_2_next")
async def handle_intro_2(call: CallbackQuery, state: FSMContext, bot: Bot):
    if not call.message:
        return
    # await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    async with ChatActionSender(bot=bot, chat_id=call.message.chat.id):
        await asyncio.sleep(1)
        await bot.send_message(call.message.chat.id, "–ö–∞–∫ —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä \"–ú–∞—à–∞\".")
    await state.set_state(OnboardingStates.waiting_for_name)
    await call.answer()

@router.message(OnboardingStates.waiting_for_name, F.text)
async def handle_name(message: Message, state: FSMContext, bot: Bot):
    if not message.text or not message.from_user:
        return
    logger.info(f"--- handle_name triggered for user {message.from_user.id} ---")
    name = message.text.strip()
    if len(name) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(name=name)
    
    async with ChatActionSender(bot=bot, chat_id=message.chat.id):
        # await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEMAbZmZt921Lp2Gj1j2eWq-mYtW_zdDQACVgwAAg3S2UqD29_A-EEi9zQE")
        await asyncio.sleep(1)
        await message.answer(f"–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")
        await asyncio.sleep(1.5)
        await message.answer("–°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –£–∫–∞–∂–∏ —Ü–∏—Ñ—Ä—É.\n\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–Ω–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
    await state.set_state(OnboardingStates.waiting_for_age)
    
@router.message(OnboardingStates.waiting_for_age, F.text)
async def handle_age(message: Message, state: FSMContext, bot: Bot):
    if not message.text or not message.text.isdigit() or not message.from_user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    
    age = int(message.text)
    if not 10 <= age <= 100:
        await message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100 –ª–µ—Ç).")
        return
        
    await state.update_data(age=age)
    
    async with ChatActionSender(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(1)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")]
        ])
        await message.answer("–û—Ç–ª–∏—á–Ω–æ. –ê –≤ –∫–∞–∫–æ–º —Ä–æ–¥–µ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äì –≤ –º—É–∂—Å–∫–æ–º –∏–ª–∏ –∂–µ–Ω—Å–∫–æ–º? üòá", reply_markup=markup)

    await state.set_state(OnboardingStates.waiting_for_gender)
    logger.info(f"User {message.from_user.id}: State set to 'waiting_for_gender'.")

@router.callback_query(OnboardingStates.waiting_for_gender, F.data.startswith("gender_"))
async def handle_gender(call: CallbackQuery, state: FSMContext, bot: Bot):
    if not call.data or not call.message or not call.from_user:
        return
        
    user_id = call.from_user.id
    logger.info(f"--- handle_gender triggered for user {user_id} with data: {call.data} ---")
    
    gender = call.data.replace("gender_", "")
    data = await state.get_data()
    name = data.get("name")
    age_str = data.get("age")

    try:
        age = int(age_str) if age_str else None
    except (ValueError, TypeError):
        age = None
    
    logger.info(f"User {user_id}: Data from state: Name='{name}', Age={age}, Gender='{gender}'")

    if age is not None and age < 14:
        logger.info(f"User {user_id}: Age is below 14. Aborting onboarding.")
        await bot.send_message(
            chat_id=call.message.chat.id,
            text=(
                "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 14 –ª–µ—Ç. "
                "–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—É—é —è –æ–∫–∞–∑—ã–≤–∞—é.\n\n"
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–∞—Å—Ç–µ—à—å! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ. üòä"
            )
        )
        await call.answer()
        # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return

    try:
        logger.info(f"User {user_id}: Preparing to update DB record.")
        update_query = "UPDATE users SET preferred_name=$1, age=$2, gender=$3, onboarding_completed=TRUE WHERE telegram_id=$4"
        logger.debug(f"User {user_id}: Executing SQL: {update_query} with params: [{name}, {age}, {gender}, {user_id}]")
        
        await db.execute(update_query, name, age, gender, user_id)
        
        logger.info(f"User {user_id}: DB record updated successfully. Preparing final message.")
    except Exception as e:
        logger.error(f"User {user_id}: DB update FAILED: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        await state.clear()
        return

    # await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    try:
        async with ChatActionSender(bot=bot, chat_id=call.message.chat.id):
            await asyncio.sleep(1)
            logger.info(f"User {user_id}: Sending final confirmation message.")
            await bot.send_message(
                chat_id=call.message.chat.id,
                text=f"–°–ø–∞—Å–∏–±–æ, {name}! –Ø –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–∞. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å üòä\n\n"
                     "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
                reply_markup=ReplyKeyboardRemove()
            )
        logger.info(f"User {user_id}: Final message sent. Clearing state.")
    except Exception as e:
        logger.error(f"User {user_id}: FAILED to send final message: {e}")

    await state.clear()
    await call.answer() 