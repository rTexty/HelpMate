services:
  postgres:
    image: postgres:15-alpine # Используем легковесный образ Alpine
    container_name: aiogptbot_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine # Используем легковесный образ Alpine
    container_name: aiogptbot_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build: .
    container_name: aiogptbot
    command: >
      sh -c "echo 'Waiting for DB...' &&
             alembic upgrade head &&
             echo 'Migrations applied, starting bot...' &&
             python -u -m aiogptbot.bot.main"
    env_file: .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  admin_bot:
    build: .
    container_name: aiogptbot_admin
    command: ["python", "-u", "-m", "aiogptbot.adminbot.main"]
    env_file: .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data: 