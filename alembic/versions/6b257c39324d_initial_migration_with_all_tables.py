"""Initial migration with all tables

Revision ID: 6b257c39324d
Revises: 
Create Date: 2025-06-27 18:31:43.219418

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6b257c39324d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    op.drop_index(op.f('idx_subscriptions_user_id'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_table('bans')
    op.drop_index(op.f('idx_mailings_sent'), table_name='mailings')
    op.drop_table('mailings')
    op.drop_table('prompt_history')
    op.drop_table('user_memory')
    op.alter_column('messages', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('messages', 'role',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('messages', 'content',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_messages_user_id'), table_name='messages')
    op.drop_constraint(op.f('messages_user_id_fkey'), 'messages', type_='foreignkey')
    op.create_foreign_key(None, 'messages', 'users', ['user_id'], ['id'])
    op.add_column('payments', sa.Column('payment_system', sa.String(length=50), nullable=False))
    op.add_column('payments', sa.Column('telegram_payment_charge_id', sa.Text(), nullable=True))
    op.add_column('payments', sa.Column('cryptocloud_invoice_id', sa.String(length=255), nullable=True))
    op.add_column('payments', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('payments', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.alter_column('payments', 'currency',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('payments', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('payments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_payments_invoice_id'), table_name='payments')
    op.drop_index(op.f('idx_payments_poll'), table_name='payments')
    op.drop_index(op.f('idx_payments_user_id'), table_name='payments')
    op.drop_constraint(op.f('payments_user_id_fkey'), 'payments', type_='foreignkey')
    op.create_foreign_key(None, 'payments', 'users', ['user_id'], ['id'])
    op.drop_column('payments', 'invoice_id')
    op.drop_column('payments', 'payment_method')
    op.alter_column('prompts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_prompts_is_active'), table_name='prompts')
    op.add_column('text_settings', sa.Column('id', sa.Integer(), autoincrement=True, nullable=False))
    op.alter_column('text_settings', 'key',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('text_settings', 'value',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('text_settings', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.create_unique_constraint(None, 'text_settings', ['key'])
    op.drop_column('text_settings', 'updated_at')
    op.add_column('users', sa.Column('preferred_name', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('age', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('gender', sa.String(length=10), nullable=True))
    op.add_column('users', sa.Column('onboarding_completed', sa.Boolean(), nullable=True))
    op.alter_column('users', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'demo'::character varying"))
    op.alter_column('users', 'subscription_until',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_activity',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_telegram_id'), table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_users_telegram_id'), 'users', ['telegram_id'], unique=False)
    op.alter_column('users', 'last_activity',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'subscription_until',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'demo'::character varying"))
    op.drop_column('users', 'onboarding_completed')
    op.drop_column('users', 'gender')
    op.drop_column('users', 'age')
    op.drop_column('users', 'preferred_name')
    op.add_column('text_settings', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'text_settings', type_='unique')
    op.alter_column('text_settings', 'description',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('text_settings', 'value',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('text_settings', 'key',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_column('text_settings', 'id')
    op.create_index(op.f('idx_prompts_is_active'), 'prompts', ['is_active'], unique=False)
    op.alter_column('prompts', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('payments', sa.Column('payment_method', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('payments', sa.Column('invoice_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.create_foreign_key(op.f('payments_user_id_fkey'), 'payments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_payments_user_id'), 'payments', ['user_id'], unique=False)
    op.create_index(op.f('idx_payments_poll'), 'payments', ['payment_method', 'status'], unique=False)
    op.create_index(op.f('idx_payments_invoice_id'), 'payments', ['invoice_id'], unique=False)
    op.alter_column('payments', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('payments', 'status',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('payments', 'currency',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('payments', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('payments', 'updated_at')
    op.drop_column('payments', 'cryptocloud_invoice_id')
    op.drop_column('payments', 'telegram_payment_charge_id')
    op.drop_column('payments', 'payment_system')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key(op.f('messages_user_id_fkey'), 'messages', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_messages_user_id'), 'messages', ['user_id'], unique=False)
    op.alter_column('messages', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('messages', 'content',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('messages', 'role',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('messages', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('user_memory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_memory_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_memory_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_memory_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('prompt_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prompt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], name=op.f('prompt_history_prompt_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('prompt_history_pkey'))
    )
    op.create_table('mailings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('button_text', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('button_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('segment', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('mailings_pkey'))
    )
    op.create_index(op.f('idx_mailings_sent'), 'mailings', ['sent'], unique=False)
    op.create_table('bans',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bans_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bans_pkey'))
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('subscriptions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_pkey'))
    )
    op.create_index(op.f('idx_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=False)
    op.create_table('prices',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name=op.f('prices_pkey'))
    )
    # ### end Alembic commands ###
